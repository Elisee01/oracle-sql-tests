-- Creating tables
CREATE TABLE Countries (
    Country_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Country_Name VARCHAR2(100) NOT NULL UNIQUE,
    Country_Code VARCHAR2(10) NOT NULL UNIQUE,
    Created_At TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Departments (
    Department_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Department_Name VARCHAR2(100) NOT NULL,
    Location VARCHAR2(100),
    Country_ID NUMBER,
    FOREIGN KEY (Country_ID) REFERENCES Countries(Country_ID)
);

CREATE TABLE Roles (
    Role_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Role_Name VARCHAR2(100) NOT NULL,
    Created_At TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Employees (
    Employee_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    First_Name VARCHAR2(50) NOT NULL,
    Last_Name VARCHAR2(50) NOT NULL,
    Email VARCHAR2(100) UNIQUE NOT NULL,
    Phone_Number VARCHAR2(15),
    Address VARCHAR2(255),
    Hire_Date DATE DEFAULT SYSDATE,
    Department_ID NUMBER,
    Role_ID NUMBER,
    Salary NUMBER,
    FOREIGN KEY (Department_ID) REFERENCES Departments(Department_ID),
    FOREIGN KEY (Role_ID) REFERENCES Roles(Role_ID)
);

CREATE TABLE Managers (
    Manager_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Employee_ID NUMBER UNIQUE,
    Department_ID NUMBER,
    FOREIGN KEY (Employee_ID) REFERENCES Employees(Employee_ID),
    FOREIGN KEY (Department_ID) REFERENCES Departments(Department_ID)
);

-- Inserting data into Countries table
INSERT INTO Countries (Country_Name, Country_Code) VALUES ('USA', 'US');
INSERT INTO Countries (Country_Name, Country_Code) VALUES ('India', 'IN');

-- Inserting data into Departments table
INSERT INTO Departments (Department_Name, Location, Country_ID) VALUES ('HR', 'New York', 1);
INSERT INTO Departments (Department_Name, Location, Country_ID) VALUES ('IT', 'Bangalore', 2);

-- Inserting data into Roles table
INSERT INTO Roles (Role_Name) VALUES ('Software Engineer');
INSERT INTO Roles (Role_Name) VALUES ('HR Manager');

-- Inserting data into Employees table
INSERT INTO Employees (First_Name, Last_Name, Email, Phone_Number, Address, Department_ID, Role_ID, Salary)
VALUES ('John', 'Doe', 'john.doe@example.com', '1234567890', '1234 Elm Street', 1, 2, 50000);

INSERT INTO Employees (First_Name, Last_Name, Email, Phone_Number, Address, Department_ID, Role_ID, Salary)
VALUES ('Jane', 'Smith', 'jane.smith@example.com', '0987654321', '5678 Maple Avenue', 2, 1, 60000);

-- Inserting data into Allowances table
INSERT INTO Allowances (Role_ID, Allowance_Amount, Comments) VALUES (1, 500, 'Year-end bonus');
INSERT INTO Allowances (Role_ID, Allowance_Amount, Comments) VALUES (2, 700, 'Holiday bonus');

-- Inserting data into Attendance table
INSERT INTO Attendance (Employee_ID, Attendance_Date, Status) VALUES (1, SYSDATE, 'Present');
INSERT INTO Attendance (Employee_ID, Attendance_Date, Status) VALUES (2, SYSDATE, 'Absent');

-- Updating salary for employee John Doe
UPDATE Employees SET Salary = Salary + 5000 WHERE First_Name = 'John' AND Last_Name = 'Doe';

-- Marking attendance for Jane Smith
UPDATE Attendance SET Status = 'Present' WHERE Employee_ID = 2 AND Attendance_Date = SYSDATE;

-- Attempting to delete employee John Doe
DELETE FROM Employees WHERE Employee_ID = 1;

-- Attempting to delete department
DELETE FROM Departments WHERE Department_ID = 2;

-- Deleting attendance records before deleting employees
DELETE FROM Attendance WHERE Employee_ID IN (SELECT Employee_ID FROM Employees WHERE Department_ID = 2);

-- Deleting employees after clearing dependencies
DELETE FROM Employees WHERE Department_ID = 2;

-- Retrieving employees with their department names
SELECT e.First_Name, e.Last_Name, d.Department_Name
FROM Employees e
JOIN Departments d ON e.Department_ID = d.Department_ID;

-- Retrieving employees with their roles and allowances
SELECT e.First_Name, e.Last_Name, r.Role_Name, a.Allowance_Amount
FROM Employees e
JOIN Roles r ON e.Role_ID = r.Role_ID
LEFT JOIN Allowances a ON r.Role_ID = a.Role_ID;

-- Retrieving attendance records with employee information
SELECT e.First_Name, e.Last_Name, a.Attendance_Date, a.Status
FROM Attendance a
JOIN Employees e ON a.Employee_ID = e.Employee_ID;

-- Creating a new user and granting roles
CREATE USER C##kitoga IDENTIFIED BY password123;
GRANT CREATE SESSION TO C##kitoga;
GRANT CREATE TABLE TO C##kitoga;
